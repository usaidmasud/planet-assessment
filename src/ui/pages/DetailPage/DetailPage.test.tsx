// Generated by CodiumAI

import { render, screen } from "@testing-library/react";
import DetailPage from ".";
import userEvent from "@testing-library/user-event";

describe("DetailPage", () => {
  // Renders the page with the correct title and back button
  it("should render the page with the correct title and back button", () => {
    // Mock useParams and useNavigate
    const mockParams = { pid: "1" };
    const mockNavigate = jest.fn();
    jest.mock("react-router-dom", () => ({
      useParams: jest.fn().mockReturnValue(mockParams),
      useNavigate: jest.fn().mockReturnValue(mockNavigate),
    }));

    // Mock useQuery
    const mockData = {
      name: "Planet 1",
    };
    const mockUseQuery = jest.fn().mockReturnValue({
      isLoading: false,
      isSuccess: true,
      data: mockData,
    });
    jest.mock("@tanstack/react-query", () => ({
      useQuery: mockUseQuery,
    }));

    // Render DetailPage
    render(<DetailPage />);

    // Assertions
    expect(screen.getByText("Detail of")).toBeInTheDocument();
    expect(screen.getByText("Planet 1")).toBeInTheDocument();
    expect(screen.getByRole("button")).toBeInTheDocument();

    // Trigger back button click
    userEvent.click(screen.getByRole("button"));

    // Assertion for navigate function
    expect(mockNavigate).toHaveBeenCalledWith({ pathname: "/" });
  });

  // Displays a loading spinner while fetching data
  it("should display a loading spinner while fetching data", () => {
    // Mock useParams
    const mockParams = { pid: "1" };
    jest.mock("react-router-dom", () => ({
      useParams: jest.fn().mockReturnValue(mockParams),
    }));

    // Mock useQuery
    const mockUseQuery = jest.fn().mockReturnValue({
      isLoading: true,
      isSuccess: false,
      data: null,
    });
    jest.mock("@tanstack/react-query", () => ({
      useQuery: mockUseQuery,
    }));

    // Render DetailPage
    render(<DetailPage />);

    // Assertion
    expect(screen.getByTestId("loading-spinner")).toBeInTheDocument();
  });

  // Displays planet details and sections for residents and films when data is successfully fetched
  it("should display planet details and sections for residents and films when data is successfully fetched", () => {
    // Mock useParams
    const mockParams = { pid: "1" };
    jest.mock("react-router-dom", () => ({
      useParams: jest.fn().mockReturnValue(mockParams),
    }));

    // Mock useQuery
    const mockData = {
      name: "Planet 1",
      residents: ["Resident 1", "Resident 2"],
      films: ["Film 1", "Film 2"],
    };
    const mockUseQuery = jest.fn().mockReturnValue({
      isLoading: false,
      isSuccess: true,
      data: mockData,
    });
    jest.mock("@tanstack/react-query", () => ({
      useQuery: mockUseQuery,
    }));

    // Render DetailPage
    render(<DetailPage />);

    // Assertions
    expect(screen.getByText("Planet 1")).toBeInTheDocument();
    expect(screen.getByText("Residents")).toBeInTheDocument();
    expect(screen.getByText("Films")).toBeInTheDocument();
    expect(screen.getAllByTestId("avatar")).toHaveLength(4);
  });

  // Displays an error message if data fails to fetch
  it("should display an error message if data fails to fetch", () => {
    // Mock useParams
    const mockParams = { pid: "1" };
    jest.mock("react-router-dom", () => ({
      useParams: jest.fn().mockReturnValue(mockParams),
    }));

    // Mock useQuery
    const mockUseQuery = jest.fn().mockReturnValue({
      isLoading: false,
      isError: true,
      error: { message: "Error fetching data" },
      data: null,
    });
    jest.mock("@tanstack/react-query", () => ({
      useQuery: mockUseQuery,
    }));

    // Render DetailPage
    render(<DetailPage />);

    // Assertion
    expect(screen.getByText("Error fetching data")).toBeInTheDocument();
  });

  // Displays a loading spinner if data is still loading after a certain amount of time
  it("should display a loading spinner if data is still loading after a certain amount of time", () => {
    // Mock useParams
    const mockParams = { pid: "1" };
    jest.mock("react-router-dom", () => ({
      useParams: jest.fn().mockReturnValue(mockParams),
    }));

    // Mock useQuery
    const mockUseQuery = jest.fn().mockReturnValue({
      isLoading: true,
      isSuccess: false,
      data: null,
    });
    jest.mock("@tanstack/react-query", () => ({
      useQuery: mockUseQuery,
    }));

    // Render DetailPage
    render(<DetailPage />);

    // Assertion
    expect(screen.getByTestId("loading-spinner")).toBeInTheDocument();
  });

  // Displays default values if data is missing or incomplete
  it("should display default values if data is missing or incomplete", () => {
    // Mock useParams
    const mockParams = { pid: "1" };
    jest.mock("react-router-dom", () => ({
      useParams: jest.fn().mockReturnValue(mockParams),
    }));

    // Mock useQuery
    const mockData = {
      name: "Planet 1",
      residents: null,
      films: [],
    };
    const mockUseQuery = jest.fn().mockReturnValue({
      isLoading: false,
      isSuccess: true,
      data: mockData,
    });
    jest.mock("@tanstack/react-query", () => ({
      useQuery: mockUseQuery,
    }));

    // Render DetailPage
    render(<DetailPage />);

    // Assertions
    expect(screen.getByText("Planet 1")).toBeInTheDocument();
    expect(screen.getByText("Residents")).toBeInTheDocument();
    expect(screen.getByText("0")).toBeInTheDocument();
    expect(screen.getByText("Films")).toBeInTheDocument();
    expect(screen.getByText("0")).toBeInTheDocument();
  });
});
